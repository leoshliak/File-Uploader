// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  username     String?  @unique
  password String
  files    File[]
  folders  Folder[]
  sessions Session[]
}

model Folder {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  parentId    Int?
  parent      Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  subfolders  Folder[] @relation("FolderHierarchy")
  files       File[]

  @@unique([name, userId, parentId])
}

model File {
  id         Int      @id @default(autoincrement())
  filename   String
  url        String   @unique
  uploadedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  size       Int
  mimeType   String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  folderId   Int?
  folder     Folder?  @relation(fields: [folderId], references: [id])

  @@unique([filename, folderId, userId])
}

model Session {
  id           String   @id
  sid          String   @unique
  data         String
  expiresAt    DateTime
  userId       Int?
  user         User?    @relation(fields: [userId], references: [id])

  @@index([sid])
  @@index([expiresAt])
}

